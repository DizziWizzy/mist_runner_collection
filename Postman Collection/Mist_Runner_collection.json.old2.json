{
	"info": {
		"_postman_id": "8111ab86-8014-49cb-8551-e9217e96cd25",
		"name": "Mist Runner Collections",
		"description": "This collection will use a CSV Template to create multiple sites via the Mist API.\n\nIt also uses a google API to get the lat/long of the address and use the properly formatted address returned from Google Maps.\n\n\nRequired Environmental Variables:\n\n{{apitoken}} This your Mist dashboard API token.  It should have permissions to create sites\n{{google_api_token}} This is a google API token that has access to geocode APIs.\n\n\nCSV Required Values:\nsite_name\nsite_address (Note, must be URL Encoded (replace \" \" with \"+\" and enclosed in quotes)\n\nCSV Optional Values:\nsite_groups\nrf_template_id\n\nExample CSV:\n\nsite_name,site_address,site_groups,rf_template_id\n```\nAdonis,\"5592+S+Adonis+Pl,+Boise,+ID+83716\",xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx,xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Site Creation",
			"item": [
				{
					"name": "googleGeocode",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "820dcf5d-9d01-4ee5-a515-0e703036506b",
								"exec": [
									"var encoded = encodeURIComponent(pm.environment.get(\"site_address\") );",
									"pm.collectionVariables.set(\"site_address\", encoded);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "76c1599a-456f-4eda-a394-9aef4bdb1c27",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.test(\"Status code is 200\", function() {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"pm.test(\"Results is not empty\", function() {",
									"  pm.expect(jsonData.results).length >= 1;",
									"});",
									"pm.environment.set(\"formatted_address\", jsonData.results[0].formatted_address)",
									"pm.environment.set(\"lat\", parseFloat(jsonData.results[0].geometry.location.lat))",
									"pm.environment.set(\"lng\", parseFloat(jsonData.results[0].geometry.location.lng))"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true,
							"accept-encoding": true,
							"accept": true,
							"user-agent": true,
							"host": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://maps.googleapis.com/maps/api/geocode/json?address={{site_address}}&key={{google_api_key}}",
							"protocol": "https",
							"host": [
								"maps",
								"googleapis",
								"com"
							],
							"path": [
								"maps",
								"api",
								"geocode",
								"json"
							],
							"query": [
								{
									"key": "address",
									"value": "{{site_address}}"
								},
								{
									"key": "key",
									"value": "{{google_api_key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "googleTimeZone",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eac3c302-2690-4a83-a480-56af5d5cd8f6",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.test(\"Status code is 200\", function() {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"pm.test(\"TimeZoneID is present\", function() {",
									"  pm.expect(jsonData).to.have.property(\"timeZoneId\");",
									"});",
									"pm.collectionVariables.set(\"time_zone\", jsonData.timeZoneId)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://maps.googleapis.com/maps/api/timezone/json?location={{lat}},{{lng}}&timestamp={{$timestamp}}&key={{google_api_key}}",
							"protocol": "https",
							"host": [
								"maps",
								"googleapis",
								"com"
							],
							"path": [
								"maps",
								"api",
								"timezone",
								"json"
							],
							"query": [
								{
									"key": "location",
									"value": "{{lat}},{{lng}}"
								},
								{
									"key": "timestamp",
									"value": "{{$timestamp}}"
								},
								{
									"key": "key",
									"value": "{{google_api_key}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getOrgSites_CheckDuplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05fffd6c-7623-421a-95e3-676f684f3620",
								"exec": [
									"var nextRequest = \"createOrgSite\"",
									"var foundDup = false",
									"var jsonData = JSON.parse(responseBody);",
									"for (var i = 0; i < jsonData.length; i++) {",
									"    if (jsonData[i].name == pm.variables.get(\"site_name\")) {",
									"        console.log(\"Found Duplicate Site\")",
									"        foundDup = true",
									"        }",
									"};",
									"",
									"pm.test(\"Verify site_name does not exist\", function(){",
									"    pm.expect(foundDup).to.eql(false);",
									"});",
									"if (foundDup == true){",
									"     nextRequest = null",
									"};",
									"",
									"",
									"console.log(nextRequest)",
									"postman.setNextRequest(nextRequest);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/api/v1/orgs/:orgr_id/sites",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgr_id",
								"sites"
							],
							"variable": [
								{
									"key": "orgr_id",
									"type": "string",
									"value": "{{org_id}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "ok",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "",
									"variable": [
										{
											"key": "orgr_id",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "[\n    {\n        \"name\": \"Mist Office\",\n        \"timezone\": \"America/Los_Angeles\",\n        \"country_code\": \"US\",\n        \"rftemplate_id\": \"bb8a9017-1e36-5d6c-6f2b-551abe8a76a2\",\n        \"secpolicy_id\": \"3bcd0beb-5d0a-4cbd-92c1-14aea91e98ef\",\n        \"alarmtemplate_id\": \"684dfc5c-fe77-2290-eb1d-ef3d677fe168\",\n        \"latlng\": {\n            \"lat\": 37.295833,\n            \"lng\": -122.032946\n        },\n        \"sitegroup_ids\": [\n            \"581328b6-e382-f54e-c9dc-999983183a34\",\n            \"f57096b9-0c2f-4df6-c77b-ae6ae87a3d43\"\n        ],\n        \"address\": \"1601 S. Deanza Blvd., Cupertino, CA, 95014\"\n    }\n]"
						}
					]
				},
				{
					"name": "createOrgSite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "45dcdd51-984e-4b47-9fcb-bee6faf87ef5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eec511bd-75d0-4a0c-9aec-09981eaa403c",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.test(\"Status code is 200\", function() {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"pm.test(\"Site ID  is present\", function() {",
									"  pm.expect(jsonData).to.have.property(\"id\");",
									"});",
									"pm.test(\"Name matches CSV\", function() {",
									"  pm.expect(jsonData.name).to.equal(pm.variables.get(\"site_name\"));",
									"});",
									"",
									"pm.collectionVariables.unset(\"site_address\")",
									"pm.collectionVariables.unset(\"lat\")",
									"pm.collectionVariables.unset(\"lng\")",
									"pm.collectionVariables.unset(\"formatted_address\")",
									"pm.collectionVariables.unset(\"time_zone\")",
									"pm.collectionVariables.unset(\"device_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"connection": true,
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Token {{apitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{site_name}}\",\n    \"timezone\": \"{{time_zone}}\",\n    \"country_code\": \"US\",\n    \"rftemplate_id\": \"{{rf_template_id}}\",\n    \"latlng\": { \"lat\": {{lat}}, \"lng\": {{lng}} },\n    \"address\": \"{{formatted_address}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/api/v1/orgs/:org_id/sites",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":org_id",
								"sites"
							],
							"variable": [
								{
									"key": "org_id",
									"value": "{{org_id}}"
								}
							]
						},
						"description": "#### Body Parameters\n**Parameter**|**Type**|**Description** \n:-------------: |:-------------: |:-------------: \nname|string|Required. The name of the site\ntimezone|string|Timezone the site is at\ncountry_code|string|country code for the site (for AP config generation), in two-character\nlatlng|latlng|site location\naddress|string|full address of the site\nlat|float|latitude\nlng|float|longitude\nsitegroup_ids|list|sitegroups this site belongs to\nrftemplate_id|string|RF Template ID, this takes precedence over Site Settings\nsecpolicy_id|string|SecPolicy ID\nalarmtemplate_id|string|Alarm Template ID, this takes precedence over the Org-level alarmtemplate_id"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Mist Office\",\n    \"timezone\": \"America/Los_Angeles\",\n    \"country_code\": \"US\",\n    \"rftemplate_id\": \"bb8a9017-1e36-5d6c-6f2b-551abe8a76a2\",\n    \"secpolicy_id\": \"3bcd0beb-5d0a-4cbd-92c1-14aea91e98ef\",\n    \"alarmtemplate_id\": \"684dfc5c-fe77-2290-eb1d-ef3d677fe168\",\n\n    \"latlng\": { \"lat\": 37.295833, \"lng\": -122.032946 },\n    \"sitegroup_ids\": [ \"581328b6-e382-f54e-c9dc-999983183a34\", \"f57096b9-0c2f-4df6-c77b-ae6ae87a3d43\" ],\n    \"address\": \"1601 S. Deanza Blvd., Cupertino, CA, 95014\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}/api/v1/orgs/:org_id/sites",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":org_id",
										"sites"
									],
									"variable": [
										{
											"key": "org_id",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": \"4ac1dcf4-9d8b-7211-65c4-057819f0862b\",\n    \"name\": \"Mist Office\",\n    \"timezone\": \"America/Los_Angeles\",\n    \"country_code\": \"US\",\n    \"latlng\": {\n        \"lat\": 37.295833,\n        \"lng\": -122.032946\n    },\n    \"sitegroup_ids\": [\n        \"581328b6-e382-f54e-c9dc-999983183a34\",\n        \"f57096b9-0c2f-4df6-c77b-ae6ae87a3d43\"\n    ],\n    \"address\": \"1601 S. Deanza Blvd., Cupertino, CA, 95014\"\n}"
						}
					]
				}
			],
			"description": "This collection will use a CSV Template to create multiple sites via the Mist API.\n\nIt also uses a google API to get the lat/long of the address and use the properly formatted address returned from Google Maps.\n\n\nRequired Environmental Variables:\n\n{{apitoken}} This your Mist dashboard API token.  It should have permissions to create sites\n{{google_api_token}} This is a google API token that has access to geocode APIs.\n\n\nCSV Required Values:\nsite_name\nsite_address (Note, must be URL Encoded (replace \" \" with \"+\" and enclosed in quotes)\n\nCSV Optional Values:\nsite_groups\nrf_template_id\n\nExample CSV:\n\nsite_name,site_address,site_groups,rf_template_id\n```\nAdonis,\"5592+S+Adonis+Pl,+Boise,+ID+83716\",xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx,xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```",
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "Token {{apitoken}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "Authorization",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6a6b75f9-9424-4df5-abc1-2a741de087dc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "22e6aa2c-c94f-4dba-98b2-db3114ad592b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Inventory Assignment",
			"item": [
				{
					"name": "getOrgInventory_Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "63fc75a9-2e2c-40d6-b760-dfb3b3146f80",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"for (var i = 0; i < jsonData.length; i++){",
									"    if (jsonData[i].mac == pm.variables.get(\"mac_address\")){",
									"        pm.collectionVariables.set(\"device_id\", jsonData[i].id);",
									"        console.log(\"id = \" + jsonData[i].id)",
									"    };",
									"};",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/api/v1/orgs/:org_id/inventory",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":org_id",
								"inventory"
							],
							"variable": [
								{
									"key": "org_id",
									"value": "{{org_id}}"
								}
							]
						},
						"description": "#### Response Parameters\n**Parameter**|**Type**|**Description** \nserial|string|device serial\nmodel|string|device model\ntype|string|device type, ap\nmac|string|MAC address\nname|string|device name if assigned\nid|string|device id\nsite_id|string|site id if assigned, null if not assigned\ndeviceprofile_id|string|deviceprofile id if assigned, null if not assigned\nconnected|boolean|whether the AP is connected\ncreated_time|long|inventory created time, in epoch\nmodified_time|long|inventory last modified time, in epoch\n\n\n#### Query Options\n* Filtered Inventory by\n * model\n * serial\n * magic\n * site_id\n\nExample:\n```\nhttps://{{host}}/api/v1/orgs/:org_id/inventory?model=AP41\n```"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hosts}}/api/v1/orgs/:org_id/inventory",
									"protocol": "https",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":org_id",
										"inventory"
									],
									"variable": [
										{
											"key": "org_id",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "[\n    {\n        \"serial\": \"FXLH2015150025\",\n        \"modified_time\": 1542829778,\n        \"id\": \"00000000-0000-0000-0000-5c5b35000018\",\n        \"model\": \"AP41\",\n        \"type\": \"ap\",\n        \"mac\": \"5c5b35000018\",\n        \"name\": \"hallway\",\n        \"site_id\": \"4ac1dcf4-9d8b-7211-65c4-057819f0862b\",\n        \"deviceprofile_id\": \"6f4bf402-45f9-2a56-6c8b-7f83d3bc98e9\", \n        \"status\": \"connected\",\n        \"created_time\": 1542328276\n    }\n]"
						}
					]
				},
				{
					"name": "getOrgSitesByName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0039f423-8bcc-4259-ae42-76f654fd6cfa",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function() {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"for(let i = 0; i < jsonData.length; i++){",
									"if(jsonData[i].name == pm.variables.get(\"site_name\")){",
									"    pm.collectionVariables.set(\"site_id\", jsonData[i].id);",
									"};",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/api/v1/orgs/:orgr_id/sites",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgr_id",
								"sites"
							],
							"variable": [
								{
									"key": "orgr_id",
									"value": "{{org_id}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "ok",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/api/v1/orgs/:orgr_id/sites",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgr_id",
										"sites"
									],
									"variable": [
										{
											"key": "orgr_id",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "[\n    {\n        \"name\": \"Mist Office\",\n        \"timezone\": \"America/Los_Angeles\",\n        \"country_code\": \"US\",\n        \"rftemplate_id\": \"bb8a9017-1e36-5d6c-6f2b-551abe8a76a2\",\n        \"secpolicy_id\": \"3bcd0beb-5d0a-4cbd-92c1-14aea91e98ef\",\n        \"alarmtemplate_id\": \"684dfc5c-fe77-2290-eb1d-ef3d677fe168\",\n        \"latlng\": {\n            \"lat\": 37.295833,\n            \"lng\": -122.032946\n        },\n        \"sitegroup_ids\": [\n            \"581328b6-e382-f54e-c9dc-999983183a34\",\n            \"f57096b9-0c2f-4df6-c77b-ae6ae87a3d43\"\n        ],\n        \"address\": \"1601 S. Deanza Blvd., Cupertino, CA, 95014\"\n    }\n]"
						}
					]
				},
				{
					"name": "assignOrgInventoryToSite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7f18d71d-c935-4596-9071-b1e5cbff8963",
								"exec": [
									"pm.environment.set(\"no_reassignment_bool\", (pm.variables.get(\"no_reassignment\") == \"true\"))",
									"console.log(\"Site ID = \" + pm.collectionVariables.get(\"site_id\"))",
									"console.log(pm.collectionVariables.get(\"no_reassignment_bool\"))",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b9dacd92-90c0-4a83-bd8f-1203f765d65f",
								"exec": [
									"var jsonData = pm.response.json()",
									"pm.test(\"Verify that error length is 0\", () => {",
									"    pm.expect(jsonData.error.length).to.eql(0);",
									"});",
									"pm.test(\"Verify that success length is 1\", () => {",
									"    pm.expect(jsonData.success.length).to.eql(1);",
									"});",
									"",
									"pm.collectionVariables.unset(\"site_id\")",
									"pm.collectionVariables.unset(\"mac_address\")",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-CSRFToken",
								"type": "text",
								"value": "{{csrftoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"op\": \"assign\",\n    \"site_id\": \"{{site_id}}\",\n    \"macs\": [\n        \"{{mac_address}}\"\n    ],\n    \"no_reassign\": {{no_reassignment_bool}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/api/v1/orgs/:org_id/inventory",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":org_id",
								"inventory"
							],
							"variable": [
								{
									"key": "org_id",
									"value": "{{org_id}}"
								}
							]
						},
						"description": "#### Body Parameters\n**Parameter**|**Type**|**Description** \n:-------------: |:-------------: |:-------------: \nop|string|Required. assign\nsite_id|string|Required. target site id\nmacs|list|list of MAC, e.g. 5c5b350e0001\nno_reassign|boolean|if true, treat site assignment against an already assigned AP as error"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hosts}}/api/v1/orgs/:org_id/inventory",
									"protocol": "https",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":org_id",
										"inventory"
									],
									"variable": [
										{
											"key": "org_id",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"op\": \"assign\",\n    \"success\": [ \"5c5b350e0001\" ],\n    \"error\": [ ]\n}"
						}
					]
				}
			],
			"description": "This collection will use a CSV Template to assign multiple APs to a site.\n\n\n\n\nRequired Environmental Variables:\n\n{{apitoken}} This your Mist dashboard API token.  It should have permissions to create sites\n{{org_id}} This is a google API token that has access to geocode APIs.\n\n\nCSV Required Values:\n{{site_name}}\n{{mac_address}}\n{force_reassignment} - Should be `true` or `false`\n\n\nExample CSV:\n```\nsite_name,mac_address,force_reassignment\nsite01,aabbccddeeff,true\n```",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6822a2cf-c7ab-4382-b910-03ca8814ba8a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "77e247fc-2f83-4538-bea5-417a52e23a39",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "AP Naming",
			"item": [
				{
					"name": "getOrgInventory_Naming",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc30b757-1f54-4ee5-b22a-be2db067542a",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"site_id\", jsonData[0].site_id)",
									"pm.collectionVariables.set(\"device_id\", jsonData[0].id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host}}/api/v1/orgs/:org_id/inventory?mac={{mac_address}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":org_id",
								"inventory"
							],
							"query": [
								{
									"key": "mac",
									"value": "{{mac_address}}"
								}
							],
							"variable": [
								{
									"key": "org_id",
									"value": "{{org_id}}"
								}
							]
						},
						"description": "#### Response Parameters\n**Parameter**|**Type**|**Description** \nserial|string|device serial\nmodel|string|device model\ntype|string|device type, ap\nmac|string|MAC address\nname|string|device name if assigned\nid|string|device id\nsite_id|string|site id if assigned, null if not assigned\ndeviceprofile_id|string|deviceprofile id if assigned, null if not assigned\nconnected|boolean|whether the AP is connected\ncreated_time|long|inventory created time, in epoch\nmodified_time|long|inventory last modified time, in epoch\n\n\n#### Query Options\n* Filtered Inventory by\n * model\n * serial\n * magic\n * site_id\n\nExample:\n```\nhttps://{{host}}/api/v1/orgs/:org_id/inventory?model=AP41\n```"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{hosts}}/api/v1/orgs/:org_id/inventory",
									"protocol": "https",
									"host": [
										"{{hosts}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":org_id",
										"inventory"
									],
									"variable": [
										{
											"key": "org_id",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "[\n    {\n        \"serial\": \"FXLH2015150025\",\n        \"modified_time\": 1542829778,\n        \"id\": \"00000000-0000-0000-0000-5c5b35000018\",\n        \"model\": \"AP41\",\n        \"type\": \"ap\",\n        \"mac\": \"5c5b35000018\",\n        \"name\": \"hallway\",\n        \"site_id\": \"4ac1dcf4-9d8b-7211-65c4-057819f0862b\",\n        \"deviceprofile_id\": \"6f4bf402-45f9-2a56-6c8b-7f83d3bc98e9\", \n        \"status\": \"connected\",\n        \"created_time\": 1542328276\n    }\n]"
						}
					]
				},
				{
					"name": "renameAP",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5de6868e-ac50-447c-9372-79573c2a5b06",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.test(\"Response Shows Name set\", function() {",
									"    pm.expect(jsonData.name == pm.variables.get(\"device_name\"))",
									"});",
									"",
									"pm.collectionVariables.unset(\"device_id\")",
									"pm.collectionVariables.unset(\"site_id\")",
									"pm.collectionVariables.unset(\"force_reassignment_bool\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{device_name}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}/api/v1/sites/:site_id/devices/:device_id",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"sites",
								":site_id",
								"devices",
								":device_id"
							],
							"variable": [
								{
									"key": "site_id",
									"value": "{{site_id}}"
								},
								{
									"key": "device_id",
									"value": "{{device_id}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host}}/api/v1/sites/:site_id/devices/:device_id",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"sites",
										":site_id",
										"devices",
										":device_id"
									],
									"variable": [
										{
											"key": "site_id",
											"value": ""
										},
										{
											"key": "device_id",
											"value": ""
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"name\": \"conference room\",\n    \"notes\": \"slightly off center\",\n    \"map_id\": \"63eda950-c6da-11e4-a628-60f81dd250cc\",\n    \"x\": 53.5,\n    \"y\": 173.1,\n    \"orientation_overwrite\": true,\n    \"orientation\": 45,\n    \"height\": 3,\n    \"radio_config\": {\n        \"band_24\": {\n            \"disabled\": false,\n            \"channel\": 0,\n            \"bandwidth\": 20,\n            \"power\": 1,\n            \"antenna_mode\": \"1x1\",\n            \"allow_rrm_disable\": false\n        },\n        \"band_5\": {\n            \"disabled\": false,\n            \"channel\": 0,\n            \"bandwidth\": 40,\n            \"power\": 0,\n            \"antenna_mode\": \"default\"\n        },\n        \"ant_gain_24\": 4,\n        \"ant_gain_5\": 5,\n        \"band_24_usage\": \"5\",\n        \"band_5_on_24_radio\": {\n            \"disabled\": false,\n            \"channel\": 0,\n            \"bandwidth\": 40,\n            \"power\": 0,\n            \"antenna_mode\": \"default\"\n        },\n        \"scanning_enabled\": true\n    },\n    \"ip_config\": {\n        \"type\": \"static\",\n        \"ip\": \"10.2.1.1\",\n        \"netmask\": \"255.255.255.0\",\n        \"gateway\": \"10.2.1.254\",\n        \"type6\": \"static\",\n        \"ip6\": \"2607:f8b0:4005:808::2004\",\n        \"netmask6\": \"/32\",\n        \"gateway6\": \"2607:f8b0:4005:808::1\",\n        \"dns\": [\n            \"8.8.8.8\",\n            \"4.4.4.4\"\n        ],\n        \"dns_suffix\": [\n            \".mist.local\",\n            \".mist.com\"\n        ],\n        \"vlan_id\": 1,\n        \"mtu\": 0\n    },\n    \"ble_config\": {\n        \"power_mode\": \"custom\",\n        \"power\": 10,\n        \"beacon_enabled\": true,\n        \"beacon_rate_mode\": \"custom\",\n        \"beacon_rate\": 3,\n        \"beam_disabled\": [\n            1,\n            3,\n            6\n        ],\n        \"ibeacon_enabled\": true,\n        \"ibeacon_uuid\": \"f3f17139-704a-f03a-2786-0400279e37c3\",\n        \"ibeacon_major\": 13,\n        \"ibeacon_minor\": 138,\n        \"ibeacon_adv_power\": -65,\n        \"ibeacon_beams\": \"default\",\n        \"eddystone_uid_enabled\": false,\n        \"eddystone_uid_namespace\": \"2818e3868dec25629ede\",\n        \"eddystone_uid_instance\": \"5c5b35000001\",\n        \"eddystone_uid_freq_msec\": 200,\n        \"eddystone_uid_adv_power\": -65,\n        \"eddystone_uid_beams\": \"default\",\n        \"eddystone_url_enabled\": false,\n        \"eddystone_url_url\": \"https://www.abc.com\",\n        \"eddystone_url_freq_msec\": 1000,\n        \"eddystone_url_adv_power\": -65,\n        \"eddystone_url_beams\": \"2-4,7\"\n    },\n    \"usb_config\": {\n        \"enabled\": true,\n        \"type\": \"imagotag\",\n        \"host\": \"1.1.1.1\",\n        \"channel\": 3,\n        \"port\": 0,\n        \"verify_cert\": false,\n        \"cacert\": \"\"\n    },\n    \"led\": {\n        \"enabled\": true,\n        \"brightness\": 255\n    },\n    \"mesh\": {\n        \"enabled\": true,\n        \"role\": \"base\",\n        \"group\": 0\n    },\n    \"switch_config\": {\n        \"enabled\": true,\n        \"eth0\": {\n            \"vlan_ids\": [\n                1,\n                3055\n            ],\n            \"port_vlan_id\": 1\n        }\n    },\n    \"iot_config\": {\n        \"DO\": {\n            \"enabled\": true,\n            \"value\": 1\n        },\n        \"DI1\": {\n            \"name\": \"motion\",\n            \"enabled\": true\n        },\n        \"A1\": {\n            \"name\": \"pulled-up analog\",\n            \"enabled\": true\n        }\n    },\n    \"disable_eth1\": false,\n    \"disable_module\": false,\n    \"poe_passthrough\": false,\n    \"pwr_config\": {\n        \"base\": 2000\n    },\n    \"vars\": {\n        \"RADIUS_SECRET\": \"11s64632d\",\n        \"RADIUS_IP1\": \"172.31.2.5\"\n    },\n    \"ntp_servers\": [],\n    \"deviceprofile_id\": \"6f4bf402-45f9-2a56-6c8b-7f83d3bc98e9\",\n    \"image1_url\": \"https://url/to/image.png\"\n}"
						}
					]
				}
			],
			"description": "This collection will use a CSV Template to rename multiple APs in an org.\n\n\nRequired Environmental Variables:\n\n{{apitoken}} This your Mist dashboard API token.  It should have permissions to create sites\n{{org_id}} This is your Mist org_id, it's required to know which org to pull the current inventory from.\n\n\nCSV Required Values:\nmac_address - This is the mac address for the device you wish to name.\ndevice_name - Thi is the new name you wish for the device to be.\n\n\n\n\nExample CSV:\n\n```\ndevice_name,mac_address\nJakeAP43, aabbccddeeff\nRyanAP43, bbccddeeff11\n```",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "acd20f4a-3177-41cd-9085-1f3ea18ddfe3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "28b22093-b515-486b-8837-cbbb199c96a6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "token {{apitoken}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b389e36e-71d0-4a84-940d-ad5c91e13ede",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "531040ef-1820-4a01-abb5-94d86cbfe46d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "2e39944e-d3b0-4cfb-b96c-5710047a2056",
			"key": "google_api_key",
			"value": ""
		},
		{
			"id": "0434eb63-b0a0-4547-b995-142b7aa6ed7e",
			"key": "site_name",
			"value": ""
		},
		{
			"id": "a6a6376d-150a-44b7-929b-fe27702dc792",
			"key": "apitoken",
			"value": ""
		},
		{
			"id": "999c9061-1fe8-4a11-a58e-6a253da62a2c",
			"key": "device_name",
			"value": ""
		},
		{
			"id": "726fa9b9-5c70-4db0-bbd2-9fdd9c4de233",
			"key": "host",
			"value": "api.mist.com"
		},
		{
			"id": "e0783665-529e-40cd-9dfa-e0dad8426354",
			"key": "force_reassignment",
			"value": ""
		},
		{
			"id": "ebf2784b-c4bd-4e96-a153-c4f661ec8258",
			"key": "device_id",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}